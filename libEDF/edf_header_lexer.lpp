/**/
%top{
#include "edf_header_parser.h"

#ifndef YY_DECL
# define YY_DECL int yylex \
           (YYSTYPE * yylval_param, YYLTYPE * yylloc_param, EDF_File * edf_file)
#endif /* !YY_DECL */
}

DIGIT     [0-9]
LETTER    [a-zA-Z]
PUNCT     [\-!"#$%&'()*+,./:;<=>?@[\\\]^_`{|}~]
LETT_DIG  ({LETTER}|{DIGIT})
ID        {LETTER}{LETT_DIG}*
SPL_KEYS  [\-!#$%&'()*+,./:;<=>?@[\\\]^_`{|}~]
KEYBKEYS  ([ \t]|{LETT_DIG}|{SPL_KEYS})
EXT_ID    ({LETT_DIG}|{SPL_KEYS})

%option bison-bridge bison-locations noyywrap

%{
#define YY_USER_ACTION \
   do {\
      yylloc->first_column = yylloc->last_column;\
      yylloc->last_column += yyleng;\
      yylloc->bytesParsed += yyleng;\
   } while(0);
%}

%%

"}"\n {
            edf_file->getFields().headerLength = yylloc->bytesParsed;
            yyterminate();
          }

(";"|"=") {
            return *yytext;
          }

{DIGIT}+ {
            yylval->str.text = yytext;
            yylval->str.len = yyleng;
            return INTEGER;
          }

({DIGIT}+\.{DIGIT}*|.{DIGIT}+) {
            yylval->str.text = yytext;
            yylval->str.len = yyleng;
            return FLOAT;
          }

{EXT_ID}+ {
            yylval->str.text = yytext;
            yylval->str.len = yyleng;
            return ID;
          }

"{"[ \t]*\n {
            yylloc->first_line++;
            yylloc->first_column = 1;
            yylloc->last_line++;
            yylloc->last_column = 1;
            yylloc->bytesParsed = yyleng;
          }
\n {
            yylloc->first_line++;
            yylloc->first_column = 1;
            yylloc->last_line++;
            yylloc->last_column = 1;
          }

[ \t]+      /* eat up whitespace */

. {
            fprintf( stderr, "Line %4d Lexing Error, unknown symbol: '%s'\n",
                     yylloc->first_line, yytext );
            exit(1);
          }

<<EOF>> {
            fprintf( stderr, "Line %4d Lexing Error, unexpected EOF: '%s'\n",
                     yylloc->first_line, yytext );
            exit(1);
          }

%%

